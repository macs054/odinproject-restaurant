(()=>{"use strict";var e={426:(e,n,t)=>{t.d(n,{Z:()=>c});var r=t(15),a=t.n(r),i=t(645),o=t.n(i)()(a());o.push([e.id,"*, *::after, *::before {\r\n    box-sizing: content-box;\r\n    padding: 0;\r\n    margin: 0;\r\n}\r\n\r\n#content {\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: space-between;\r\n    height: 100vh;\r\n    align-items: center;\r\n}\r\n\r\nbody {\r\n    font-family: sans-serif;\r\n    background: #fff;\r\n}\r\n\r\nheader {\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    justify-content: center;   \r\n    width: 100%;\r\n    padding: 2rem 0;\r\n    background: whitesmoke;\r\n}\r\n\r\n.title {\r\n    margin-bottom: 1em;\r\n    font-size: 42px;\r\n    text-align: center;\r\n}\r\n\r\n.nav {\r\n    display: flex;\r\n    width: 480px;\r\n}\r\n\r\nnav > div {\r\n    text-align: center;\r\n    text-decoration: none;\r\n    color: #292929;\r\n    font-size: 20px;\r\n    text-transform: uppercase;\r\n    display: inline;\r\n    cursor: pointer;\r\n    flex-basis: 100%;\r\n    margin: 0 1em;\r\n}\r\n\r\n.selected {\r\n    font-weight: bold;\r\n}\r\n\r\n.main-container {\r\n    min-width: 480px;\r\n    max-width: 860px;\r\n    flex-grow: 1;\r\n    margin: 3rem;\r\n    display: flex;\r\n}\r\n\r\n.home-container,\r\n.menu-container {\r\n    background-color: whitesmoke;\r\n    flex-grow: 1;\r\n    height: max-content;\r\n    padding: 1em;\r\n}\r\n\r\n.home-title {\r\n    text-align: center;\r\n    font-size: 24px;\r\n    margin: 1em 0;\r\n}\r\n\r\n.home-container p {\r\n    text-align: justify;\r\n    margin: 2em;\r\n}\r\n\r\nfooter {\r\n    padding: 1rem 0;\r\n    background-color: whitesmoke;\r\n    width: 100%;\r\n    text-align: center;\r\n}\r\n\r\n.menu-container {\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n    align-items: center;\r\n    justify-content: center;\r\n}\r\n\r\n.menu-item {\r\n    padding: 1em;\r\n    max-width: 350px;\r\n    flex: 1 1 60%;\r\n}\r\n\r\n.menu-item-name {\r\n    padding-top: 0.5em;\r\n    text-align: center;\r\n}\r\n\r\n.menu-item-desc {\r\n    text-align: justify;\r\n    padding-top: 0.5em;\r\n}\r\n\r\n.menu-item-img {\r\n    display: block;\r\n    margin: 0 auto;\r\n}","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;IACI,uBAAuB;IACvB,UAAU;IACV,SAAS;AACb;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,8BAA8B;IAC9B,aAAa;IACb,mBAAmB;AACvB;;AAEA;IACI,uBAAuB;IACvB,gBAAgB;AACpB;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,mBAAmB;IACnB,uBAAuB;IACvB,WAAW;IACX,eAAe;IACf,sBAAsB;AAC1B;;AAEA;IACI,kBAAkB;IAClB,eAAe;IACf,kBAAkB;AACtB;;AAEA;IACI,aAAa;IACb,YAAY;AAChB;;AAEA;IACI,kBAAkB;IAClB,qBAAqB;IACrB,cAAc;IACd,eAAe;IACf,yBAAyB;IACzB,eAAe;IACf,eAAe;IACf,gBAAgB;IAChB,aAAa;AACjB;;AAEA;IACI,iBAAiB;AACrB;;AAEA;IACI,gBAAgB;IAChB,gBAAgB;IAChB,YAAY;IACZ,YAAY;IACZ,aAAa;AACjB;;AAEA;;IAEI,4BAA4B;IAC5B,YAAY;IACZ,mBAAmB;IACnB,YAAY;AAChB;;AAEA;IACI,kBAAkB;IAClB,eAAe;IACf,aAAa;AACjB;;AAEA;IACI,mBAAmB;IACnB,WAAW;AACf;;AAEA;IACI,eAAe;IACf,4BAA4B;IAC5B,WAAW;IACX,kBAAkB;AACtB;;AAEA;IACI,aAAa;IACb,eAAe;IACf,mBAAmB;IACnB,uBAAuB;AAC3B;;AAEA;IACI,YAAY;IACZ,gBAAgB;IAChB,aAAa;AACjB;;AAEA;IACI,kBAAkB;IAClB,kBAAkB;AACtB;;AAEA;IACI,mBAAmB;IACnB,kBAAkB;AACtB;;AAEA;IACI,cAAc;IACd,cAAc;AAClB",sourcesContent:["*, *::after, *::before {\r\n    box-sizing: content-box;\r\n    padding: 0;\r\n    margin: 0;\r\n}\r\n\r\n#content {\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: space-between;\r\n    height: 100vh;\r\n    align-items: center;\r\n}\r\n\r\nbody {\r\n    font-family: sans-serif;\r\n    background: #fff;\r\n}\r\n\r\nheader {\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    justify-content: center;   \r\n    width: 100%;\r\n    padding: 2rem 0;\r\n    background: whitesmoke;\r\n}\r\n\r\n.title {\r\n    margin-bottom: 1em;\r\n    font-size: 42px;\r\n    text-align: center;\r\n}\r\n\r\n.nav {\r\n    display: flex;\r\n    width: 480px;\r\n}\r\n\r\nnav > div {\r\n    text-align: center;\r\n    text-decoration: none;\r\n    color: #292929;\r\n    font-size: 20px;\r\n    text-transform: uppercase;\r\n    display: inline;\r\n    cursor: pointer;\r\n    flex-basis: 100%;\r\n    margin: 0 1em;\r\n}\r\n\r\n.selected {\r\n    font-weight: bold;\r\n}\r\n\r\n.main-container {\r\n    min-width: 480px;\r\n    max-width: 860px;\r\n    flex-grow: 1;\r\n    margin: 3rem;\r\n    display: flex;\r\n}\r\n\r\n.home-container,\r\n.menu-container {\r\n    background-color: whitesmoke;\r\n    flex-grow: 1;\r\n    height: max-content;\r\n    padding: 1em;\r\n}\r\n\r\n.home-title {\r\n    text-align: center;\r\n    font-size: 24px;\r\n    margin: 1em 0;\r\n}\r\n\r\n.home-container p {\r\n    text-align: justify;\r\n    margin: 2em;\r\n}\r\n\r\nfooter {\r\n    padding: 1rem 0;\r\n    background-color: whitesmoke;\r\n    width: 100%;\r\n    text-align: center;\r\n}\r\n\r\n.menu-container {\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n    align-items: center;\r\n    justify-content: center;\r\n}\r\n\r\n.menu-item {\r\n    padding: 1em;\r\n    max-width: 350px;\r\n    flex: 1 1 60%;\r\n}\r\n\r\n.menu-item-name {\r\n    padding-top: 0.5em;\r\n    text-align: center;\r\n}\r\n\r\n.menu-item-desc {\r\n    text-align: justify;\r\n    padding-top: 0.5em;\r\n}\r\n\r\n.menu-item-img {\r\n    display: block;\r\n    margin: 0 auto;\r\n}"],sourceRoot:""}]);const c=o},645:e=>{e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var t=e(n);return n[2]?"@media ".concat(n[2]," {").concat(t,"}"):t})).join("")},n.i=function(e,t,r){"string"==typeof e&&(e=[[null,e,""]]);var a={};if(r)for(var i=0;i<this.length;i++){var o=this[i][0];null!=o&&(a[o]=!0)}for(var c=0;c<e.length;c++){var d=[].concat(e[c]);r&&a[d[0]]||(t&&(d[2]?d[2]="".concat(t," and ").concat(d[2]):d[2]=t),n.push(d))}},n}},15:e=>{function n(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}e.exports=function(e){var t,r,a=(r=4,function(e){if(Array.isArray(e))return e}(t=e)||function(e,n){var t=e&&("undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"]);if(null!=t){var r,a,i=[],o=!0,c=!1;try{for(t=t.call(e);!(o=(r=t.next()).done)&&(i.push(r.value),!n||i.length!==n);o=!0);}catch(e){c=!0,a=e}finally{try{o||null==t.return||t.return()}finally{if(c)throw a}}return i}}(t,r)||function(e,t){if(e){if("string"==typeof e)return n(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?n(e,t):void 0}}(t,r)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),i=a[1],o=a[3];if("function"==typeof btoa){var c=btoa(unescape(encodeURIComponent(JSON.stringify(o)))),d="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(c),s="/*# ".concat(d," */"),u=o.sources.map((function(e){return"/*# sourceURL=".concat(o.sourceRoot||"").concat(e," */")}));return[i].concat(u).concat([s]).join("\n")}return[i].join("\n")}},731:(e,n)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.FORMATS=n.FORMAT_PLAIN=n.FORMAT_HTML=void 0;var t="html";n.FORMAT_HTML=t;var r="plain";n.FORMAT_PLAIN=r;var a=[t,r];n.FORMATS=a},670:(e,n)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.LINE_ENDINGS=void 0,n.LINE_ENDINGS={POSIX:"\n",WIN32:"\r\n"}},3:(e,n)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.SUPPORTED_PLATFORMS=void 0,n.SUPPORTED_PLATFORMS={DARWIN:"darwin",LINUX:"linux",WIN32:"win32"}},749:(e,n)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.WORDS=void 0,n.WORDS=["ad","adipisicing","aliqua","aliquip","amet","anim","aute","cillum","commodo","consectetur","consequat","culpa","cupidatat","deserunt","do","dolor","dolore","duis","ea","eiusmod","elit","enim","esse","est","et","eu","ex","excepteur","exercitation","fugiat","id","in","incididunt","ipsum","irure","labore","laboris","laborum","Lorem","magna","minim","mollit","nisi","non","nostrud","nulla","occaecat","officia","pariatur","proident","qui","quis","reprehenderit","sint","sit","sunt","tempor","ullamco","ut","velit","veniam","voluptate"]},380:(e,n,t)=>{Object.defineProperty(n,"Ap",{enumerable:!0,get:function(){return a.default}});t(749);var r,a=(r=t(935))&&r.__esModule?r:{default:r}},935:(e,n,t)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var r,a=t(731),i=t(670),o=(r=t(140))&&r.__esModule?r:{default:r},c=t(270);function d(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}function s(e,n){for(var t=0;t<n.length;t++){var r=n[t];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function u(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}var l=function(){function e(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:a.FORMAT_PLAIN,r=arguments.length>2?arguments[2]:void 0;if(d(this,e),u(this,"generator",void 0),u(this,"format",void 0),u(this,"suffix",void 0),-1===a.FORMATS.indexOf(t.toLowerCase()))throw new Error("".concat(t," is an invalid format. Please use ").concat(a.FORMATS.join(" or "),"."));this.format=t.toLowerCase(),this.suffix=r,this.generator=new o.default(n)}var n,t;return n=e,(t=[{key:"getLineEnding",value:function(){return this.suffix?this.suffix:!(0,c.isReactNative)()&&(0,c.isNode)()&&(0,c.isWindows)()?i.LINE_ENDINGS.WIN32:i.LINE_ENDINGS.POSIX}},{key:"formatString",value:function(e){return this.format===a.FORMAT_HTML?"<p>".concat(e,"</p>"):e}},{key:"formatStrings",value:function(e){var n=this;return e.map((function(e){return n.formatString(e)}))}},{key:"generateWords",value:function(e){return this.formatString(this.generator.generateRandomWords(e))}},{key:"generateSentences",value:function(e){return this.formatString(this.generator.generateRandomParagraph(e))}},{key:"generateParagraphs",value:function(e){var n=this.generator.generateRandomParagraph.bind(this.generator);return this.formatStrings((0,c.makeArrayOfStrings)(e,n)).join(this.getLineEnding())}}])&&s(n.prototype,t),e}();n.default=l},140:(e,n,t)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var r=t(749),a=t(270);function i(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}function o(e,n){for(var t=0;t<n.length;t++){var r=n[t];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function c(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}var d=function(){function e(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=n.sentencesPerParagraph,a=void 0===t?{max:7,min:3}:t,o=n.wordsPerSentence,d=void 0===o?{max:15,min:5}:o,s=n.random,u=(n.seed,n.words),l=void 0===u?r.WORDS:u;if(i(this,e),c(this,"sentencesPerParagraph",void 0),c(this,"wordsPerSentence",void 0),c(this,"random",void 0),c(this,"words",void 0),a.min>a.max)throw new Error("Minimum number of sentences per paragraph (".concat(a.min,") cannot exceed maximum (").concat(a.max,")."));if(d.min>d.max)throw new Error("Minimum number of words per sentence (".concat(d.min,") cannot exceed maximum (").concat(d.max,")."));this.sentencesPerParagraph=a,this.words=l,this.wordsPerSentence=d,this.random=s||Math.random}var n,t;return n=e,(t=[{key:"generateRandomInteger",value:function(e,n){return Math.floor(this.random()*(n-e+1)+e)}},{key:"generateRandomWords",value:function(e){var n=this,t=this.wordsPerSentence,r=t.min,i=t.max,o=e||this.generateRandomInteger(r,i);return(0,a.makeArrayOfLength)(o).reduce((function(e,t){return"".concat(n.pluckRandomWord()," ").concat(e)}),"").trim()}},{key:"generateRandomSentence",value:function(e){return"".concat((0,a.capitalize)(this.generateRandomWords(e)),".")}},{key:"generateRandomParagraph",value:function(e){var n=this,t=this.sentencesPerParagraph,r=t.min,i=t.max,o=e||this.generateRandomInteger(r,i);return(0,a.makeArrayOfLength)(o).reduce((function(e,t){return"".concat(n.generateRandomSentence()," ").concat(e)}),"").trim()}},{key:"pluckRandomWord",value:function(){var e=this.words.length-1,n=this.generateRandomInteger(0,e);return this.words[n]}}])&&o(n.prototype,t),e}();n.default=d},569:(e,n)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;n.default=function(e){var n=e.trim();return n.charAt(0).toUpperCase()+n.slice(1)}},270:(e,n,t)=>{Object.defineProperty(n,"__esModule",{value:!0}),Object.defineProperty(n,"capitalize",{enumerable:!0,get:function(){return r.default}}),Object.defineProperty(n,"isNode",{enumerable:!0,get:function(){return a.default}}),Object.defineProperty(n,"isReactNative",{enumerable:!0,get:function(){return i.default}}),Object.defineProperty(n,"isWindows",{enumerable:!0,get:function(){return o.default}}),Object.defineProperty(n,"makeArrayOfLength",{enumerable:!0,get:function(){return c.default}}),Object.defineProperty(n,"makeArrayOfStrings",{enumerable:!0,get:function(){return d.default}});var r=s(t(569)),a=s(t(984)),i=s(t(97)),o=s(t(606)),c=s(t(318)),d=s(t(490));function s(e){return e&&e.__esModule?e:{default:e}}},984:(e,n)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;n.default=function(){return!!e.exports}},97:(e,n)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;n.default=function(){return"undefined"!=typeof navigator&&"ReactNative"===navigator.product}},606:(e,n,t)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var r=t(3);n.default=function(){return"undefined"!=typeof process&&process.platform===r.SUPPORTED_PLATFORMS.WIN32}},318:(e,n)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;n.default=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0;return Array.apply(null,Array(e)).map((function(e,n){return n}))}},490:(e,n,t)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var r=t(270);n.default=function(e,n){return(0,r.makeArrayOfLength)(e).map((function(){return n()}))}},379:(e,n,t)=>{var r,a=function(){var e={};return function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(e){t=null}e[n]=t}return e[n]}}(),i=[];function o(e){for(var n=-1,t=0;t<i.length;t++)if(i[t].identifier===e){n=t;break}return n}function c(e,n){for(var t={},r=[],a=0;a<e.length;a++){var c=e[a],d=n.base?c[0]+n.base:c[0],s=t[d]||0,u="".concat(d," ").concat(s);t[d]=s+1;var l=o(u),m={css:c[1],media:c[2],sourceMap:c[3]};-1!==l?(i[l].references++,i[l].updater(m)):i.push({identifier:u,updater:p(m,n),references:1}),r.push(u)}return r}function d(e){var n=document.createElement("style"),r=e.attributes||{};if(void 0===r.nonce){var i=t.nc;i&&(r.nonce=i)}if(Object.keys(r).forEach((function(e){n.setAttribute(e,r[e])})),"function"==typeof e.insert)e.insert(n);else{var o=a(e.insert||"head");if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(n)}return n}var s,u=(s=[],function(e,n){return s[e]=n,s.filter(Boolean).join("\n")});function l(e,n,t,r){var a=t?"":r.media?"@media ".concat(r.media," {").concat(r.css,"}"):r.css;if(e.styleSheet)e.styleSheet.cssText=u(n,a);else{var i=document.createTextNode(a),o=e.childNodes;o[n]&&e.removeChild(o[n]),o.length?e.insertBefore(i,o[n]):e.appendChild(i)}}function m(e,n,t){var r=t.css,a=t.media,i=t.sourceMap;if(a?e.setAttribute("media",a):e.removeAttribute("media"),i&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),e.styleSheet)e.styleSheet.cssText=r;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(r))}}var f=null,A=0;function p(e,n){var t,r,a;if(n.singleton){var i=A++;t=f||(f=d(n)),r=l.bind(null,t,i,!1),a=l.bind(null,t,i,!0)}else t=d(n),r=m.bind(null,t,n),a=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)};return r(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap)return;r(e=n)}else a()}}e.exports=function(e,n){(n=n||{}).singleton||"boolean"==typeof n.singleton||(n.singleton=(void 0===r&&(r=Boolean(window&&document&&document.all&&!window.atob)),r));var t=c(e=e||[],n);return function(e){if(e=e||[],"[object Array]"===Object.prototype.toString.call(e)){for(var r=0;r<t.length;r++){var a=o(t[r]);i[a].references--}for(var d=c(e,n),s=0;s<t.length;s++){var u=o(t[s]);0===i[u].references&&(i[u].updater(),i.splice(u,1))}t=d}}}},718:e=>{e.exports=JSON.parse('{"menu":{"items":[{"name":"Food 1","description":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed quis felis ac nisl tincidunt condimentum vel eget erat.","img":"https://dummyimage.com/350x150/fff/aaa"},{"name":"Food 2","description":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed quis felis ac nisl tincidunt condimentum vel eget erat.","img":"https://dummyimage.com/350x150/fff/aaa"},{"name":"Food 3","description":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed quis felis ac nisl tincidunt condimentum vel eget erat.","img":"https://dummyimage.com/350x150/fff/aaa"},{"name":"Food 4","description":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed quis felis ac nisl tincidunt condimentum vel eget erat.","img":"https://dummyimage.com/350x150/fff/aaa"}]}}')}},n={};function t(r){var a=n[r];if(void 0!==a)return a.exports;var i=n[r]={id:r,exports:{}};return e[r](i,i.exports,t),i.exports}t.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return t.d(n,{a:n}),n},t.d=(e,n)=>{for(var r in n)t.o(n,r)&&!t.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:n[r]})},t.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),(()=>{var e=t(380);const n=new e.Ap({sentencesPerParagraph:{max:8,min:4},wordsPerSentence:{max:16,min:4}}),r=()=>{const e=document.createElement("div");e.classList.add("home-container");const t=document.createElement("h3");t.classList.add("home-title"),t.textContent="Lorem Ipsum";const r=document.createElement("p");return r.classList.add("home-content"),r.textContent=n.generateParagraphs(6),e.appendChild(t),e.appendChild(r),e},a=t(718),i=(e,n,t)=>{const r=document.createElement("div"),a=document.createElement("h3"),i=document.createElement("p"),o=document.createElement("img");return r.classList.add("menu-item"),a.classList.add("menu-item-name"),i.classList.add("menu-item-desc"),o.classList.add("menu-item-img"),r.appendChild(o),r.appendChild(a),r.appendChild(i),a.textContent=e,i.textContent=n,o.setAttribute("src",t),o.setAttribute("alt",e),r},o=["Home","Menu","Contact"],c=e=>{document.querySelectorAll(".btn").forEach((e=>{void 0!==e&&e.classList.remove("selected")})),e.classList.add("selected")},d=()=>{const e=document.createElement("header"),n=document.createElement("h1");n.classList.add("title"),n.textContent="Title";const t=document.createElement("nav");return t.classList.add("nav"),r=t,o.forEach((e=>{const n=document.createElement("div");n.textContent=e,n.classList.add("btn"),n.addEventListener("click",(()=>c(n))),r.appendChild(n)})),r.firstChild.classList.add("selected"),e.appendChild(n),e.append(t),e;var r};var s=t(379),u=t.n(s),l=t(426);u()(l.Z,{insert:"head",singleton:!1}),l.Z.locals;const m=new e.Ap({sentencesPerParagraph:{max:8,min:4},wordsPerSentence:{max:16,min:4}}),f=e=>{const n=document.querySelector(".main-container");n.textContent="",n.appendChild(e)};document.body.appendChild((()=>{const e=document.createElement("div");e.id="content";const n=document.createElement("div");return n.classList.add("main-container"),n.appendChild(r()),e.appendChild(d()),e.appendChild(n),e.appendChild((()=>{const e=document.createElement("footer"),n=document.createElement("h4");return n.textContent="Footer",e.appendChild(n),e})()),e})()),(()=>{const e=document.querySelector(".nav");e.childNodes[0].addEventListener("click",(()=>f(r()))),e.childNodes[1].addEventListener("click",(()=>f((()=>{const e=document.createElement("div");return e.classList.add("menu-container"),e.appendChild(i(a.menu.items[0].name,a.menu.items[0].description,a.menu.items[0].img)),e.appendChild(i(a.menu.items[1].name,a.menu.items[1].description,a.menu.items[1].img)),e.appendChild(i(a.menu.items[2].name,a.menu.items[2].description,a.menu.items[2].img)),e.appendChild(i(a.menu.items[3].name,a.menu.items[3].description,a.menu.items[3].img)),e})()))),e.childNodes[2].addEventListener("click",(()=>f((()=>{const e=document.createElement("div");e.classList.add("home-container");const n=document.createElement("h3");n.classList.add("home-title"),n.textContent="Lorem Ipsum";const t=document.createElement("p");return t.classList.add("home-content"),t.textContent=m.generateParagraphs(1),e.appendChild(n),e.appendChild(t),e})())))})()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,